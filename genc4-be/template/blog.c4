// The original C4 model
// https://structurizr.com/dsl?example=big-bank-plc

specification {

  element enterprise
  element softwaresystem
  element container
  element component

  element person {
    style {
      color secondary
      shape person
    }
  }

  element database {
    style {
      shape storage
    }
  }

}

model {

  customer = person "Blog Owner" {
    description "Owner of blog, post and manage his blogs on app."
  }

  blogsystem = enterprise "Blog System" {

    email = softwaresystem "E-mail System" {
      description: "The internal Microsoft Exchange e-mail system."
      style {
        color: muted
      }
    }

    blogserver = softwaresystem "Blog System Server" {
      description: "Central orchestrator for handle user's blog actions"

      singlePageApplication = container "Single-Page Application" {
        description: "Provides all of the UIs of blog functionality to customers via their web browser."
        technology: "JavaScript and ReactJS"
        style {
          shape browser
        }
      }
      webApplication = container "Web Application" {
        description: "Delivers the static content and the Blog single page application."
        technology: "Java and Spring MVC"
      }
      apiApplication = container "API Application" {
        description: "Provides blog functionality via a JSON/HTTPS API."
        technology: "Java and Spring MVC"

        signinController = component "Sign In Controller" {
          description: "Allows users to sign in to the Blog System."
          technology: "Spring MVC Rest Controller"
        }

        postController = component "Post Controller" {
          description: "Provides customers all information about blogs."
          technology: "Spring MVC Rest Controller"
        }
        resetPasswordController = component "Reset Password Controller" {
          description: "Allows users to reset their passwords with a single use URL."
          technology: "Spring MVC Rest Controller"
        }
        securityComponent = component "Security Component" {
          description: "Provides functionality related to signing in, changing passwords, etc."
          technology: "Spring Bean"
        }
        emailComponent = component "E-mail Component"{
          description:  "Sends e-mails to users."
          technology: "Spring Bean"
        }

      }
      database = database "Database" {
        description: "Stores user registration information, hashed authentication credentials, access logs, etc."
        technology: "Oracle Database Schema"
      }
    }
  }

  // relationships between people and software systems
  customer -> blogserver "Views account balances, and makes payments using"
  blogserver -> email "Sends e-mail using"
  email -> customer "Sends e-mails to"

  // relationships to/from containers
  customer -> webApplication "Visits blogsystem.com using HTTPS"
  customer -> singlePageApplication "Views account and blogs"
  webApplication -> singlePageApplication "Delivers to the customer's web browser"

  // relationships to/from components
  singlePageApplication -> signinController "Makes API calls to"
  singlePageApplication -> postController "Makes API calls to"
  singlePageApplication -> resetPasswordController "Makes API calls to"
  signinController -> securityComponent "Uses"
  resetPasswordController -> securityComponent "Uses"
  resetPasswordController -> emailComponent "Uses"
  securityComponent -> database "Reads from and writes to"
  emailComponent -> email "Sends e-mail using"

}

views {

  view index of blogsystem {
    title "Blog System - Landscape"
    include *
  }

  view context of blogsystem {
    title "Blog Server - SystemContext"
    include
      blogsystem,
      blogserver,
      email,
      customer

    style * {
      color secondary
    }
    style blogsystem, blogserver {
      color primary
    }
  }

  view ibsContainers of blogserver {
    title "Blog System - Containers"

    include
      *,
      -> customer
  }

  view customer of customer {
    include
      *,
      customer -> blogserver.*,
      customer -> blogsystem.*
    exclude webApplication

    style blogsystem {
      color muted
    }
    style customer {
      color green
    }
  }

  view spa of singlePageApplication {
    include
      *,
      apiApplication,
      blogserver,
      -> singlePageApplication ->

    style * {
      color secondary
    }
    style blogserver {
      color muted
    }
    style singlePageApplication {
      color green
    }
  }

  view apiApp of blogserver.apiApplication {
    title "API Application - Components"

    include *

    style * {
      color muted
    }

    style apiApplication, apiApplication.* {
      color primary
    }
  }

  view webapp of webApplication {
    include
      *,
      blogserver,
      blogsystem

    style blogsystem {
      color muted
    }
  }

}